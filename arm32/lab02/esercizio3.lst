


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             myCode, READONLY, CODE
    2 00000000                 ENTRY
    3 00000000 E3A00000        MOV              R0, #0
    4 00000004 E3A01000        MOV              R1, #0
    5 00000008 E3A09004        MOV              R9, #4
    6 0000000C E3A0A000        MOV              R10, #0
    7 00000010 E3A0B000        MOV              R11, #0
    8 00000014 E3A0C000        MOV              R12, #0
    9 00000018         LOOP1
   10 00000018 E59FD10C        LDR              R13, =SEQUENCE
   11 0000001C E79D000A        LDR              R0, [R13,R10]
   12 00000020 E59FD104        LDR              R13, =SEQUENCE
   13 00000024 E79D1009        LDR              R1, [R13,R9]
   14 00000028 E1500001        CMP              R0, R1
   15 0000002C C3A0B001        MOVGT            R11, #1     ; R0 > R1 [R1- R2] 
                                                            -> DECRESCENTE
   16 00000030 B3A0C001        MOVLT            R12, #1     ; R0 < R1 [R1- R2] 
                                                            -> CRESCENTE 
   17 00000034 E28AA004        ADD              R10, R10, #4 ; counter 1 -> PAR
                                                            TE DA 0 
   18 00000038 E2899004        ADD              R9, R9, #4  ; counter 2 -> PART
                                                            E DA 4
   19 0000003C E35A001C        CMP              R10, #28    ; 4*7 = 28
   20 00000040 BAFFFFF4        BLT              LOOP1       ; fin tanto che R10
                                                             < 32
   21 00000044         
   22 00000044 E35B0000        CMP              R11, #0
   23 00000048 1A00000C        BNE              next1
   24 0000004C E35C0000        CMP              R12, #0
   25 00000050 0A00001A        BEQ              next2
   26 00000054         ; R11 = 0, R12 = 1 -> CRESCENTE -> VALORE MEDIO
   27 00000054 E3A00000        MOV              R0, #0
   28 00000058 E3A01000        MOV              R1, #0
   29 0000005C E3A0A000        MOV              R10, #0
   30 00000060         LOOP2
   31 00000060 E59FD0C4        LDR              R13, =SEQUENCE
   32 00000064 E79D000A        LDR              R0, [R13,R10]
   33 00000068 E0811000        ADD              R1, R1, R0
   34 0000006C E28AA004        ADD              R10, R10, #4 ; counter
   35 00000070 E35A0020        CMP              R10, #32    ; 4*8 = 32
   36 00000074 BAFFFFF9        BLT              LOOP2       ; fin tanto che R10
                                                             <  32
   37 00000078 E1A011A1        MOV              R1, R1, LSR #3 ; R1 = R1/8
   38 0000007C EA000021        B                end
   39 00000080         next1
   40 00000080 E35C0000        CMP              R12, #0
   41 00000084 0A00000D        BEQ              next2
   42 00000088         ; R11 = 1, R12 = 1  -> DISORDINATA -> VALORE PIù GRAMDE 
                       E PIù PICCOLO
   43 00000088 E3A00000        MOV              R0, #0
   44 0000008C E3A01000        MOV              R1, #0
   45 00000090 E3A02008        MOV              R2, #8
   46 00000094 E3A0A000        MOV              R10, #0
   47 00000098         LOOP3
   48 00000098 E59FD08C        LDR              R13, =SEQUENCE
   49 0000009C E79D000A        LDR              R0, [R13,R10]
   50 000000A0 E1500001        CMP              R0, R1
   51 000000A4 C1A01000        MOVGT            R1, R0      ; se R0 > R1 
   52 000000A8 E1500002        CMP              R0, R2



ARM Macro Assembler    Page 2 


   53 000000AC B1A02000        MOVLT            R2, R0      ; se R0 < R2
   54 000000B0 E28AA004        ADD              R10, R10, #4 ; counter
   55 000000B4 E35A0020        CMP              R10, #32    ; 4*8 = 32
   56 000000B8 BAFFFFF6        BLT              LOOP3       ; fin tanto che R10
                                                             <  32
   57 000000BC EA000011        B                end
   58 000000C0         next2
   59 000000C0         ; R11 = 1, R12 = 0 -> DECRESCENTE -> LA DIFFERENZA PIù G
                       RANDE
   60 000000C0 E3A00000        MOV              R0, #0
   61 000000C4 E3A01000        MOV              R1, #0
   62 000000C8 E3A02000        MOV              R2, #0
   63 000000CC E3A09004        MOV              R9, #4
   64 000000D0 E3A0A000        MOV              R10, #0
   65 000000D4 E3A0B000        MOV              R11, #0
   66 000000D8 E3A0C000        MOV              R12, #0
   67 000000DC         LOOP4
   68 000000DC E59FD048        LDR              R13, =SEQUENCE
   69 000000E0 E79D000A        LDR              R0, [R13,R10]
   70 000000E4 E59FD040        LDR              R13, =SEQUENCE
   71 000000E8 E79D1009        LDR              R1, [R13,R9]
   72 000000EC E0400001        SUB              R0, R0, R1
   73 000000F0 E1500002        CMP              R0, R2
   74 000000F4 C1A02000        MOVGT            R2, R0      ; se R0 > R2
   75 000000F8 E28AA004        ADD              R10, R10, #4 ; counter 1 -> PAR
                                                            TE DA 0 
   76 000000FC E2899004        ADD              R9, R9, #4  ; counter 2 -> PART
                                                            E DA 4
   77 00000100 E35A001C        CMP              R10, #28    ; 4*7 = 28
   78 00000104 BAFFFFF4        BLT              LOOP4       ; fin tanto che R10
                                                             < 28
   79 00000108         end
   80 00000108         
   81 00000108         reset_handler
   82 00000108 EAFFFFFE        B                reset_handler
   83 0000010C         ;SEQUENCE DCD 6, 9, 5, 3, 1, 2, 0, 8
   84 0000010C         ;SEQUENCE DCD 1, 2, 3, 4, 5, 6, 7, 8
   85 0000010C 00000008 
              00000007 
              00000006 
              00000005 
              00000004 
              00000003 
              00000002 
              00000001 SEQUENCE
                               DCD              8, 7, 6, 5, 4, 3, 2, 1
   86 0000012C                 END
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --apcs=interwork --depend=esercizio3.d -oesercizio
3.o -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\Philips --predefine="__EVAL SETA 1" --l
ist=esercizio3.lst esercizio3.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LOOP1 00000018

Symbol: LOOP1
   Definitions
      At line 9 in file esercizio3.s
   Uses
      At line 20 in file esercizio3.s
Comment: LOOP1 used once
LOOP2 00000060

Symbol: LOOP2
   Definitions
      At line 30 in file esercizio3.s
   Uses
      At line 36 in file esercizio3.s
Comment: LOOP2 used once
LOOP3 00000098

Symbol: LOOP3
   Definitions
      At line 47 in file esercizio3.s
   Uses
      At line 56 in file esercizio3.s
Comment: LOOP3 used once
LOOP4 000000DC

Symbol: LOOP4
   Definitions
      At line 67 in file esercizio3.s
   Uses
      At line 78 in file esercizio3.s
Comment: LOOP4 used once
SEQUENCE 0000010C

Symbol: SEQUENCE
   Definitions
      At line 85 in file esercizio3.s
   Uses
      At line 10 in file esercizio3.s
      At line 12 in file esercizio3.s
      At line 31 in file esercizio3.s
      At line 48 in file esercizio3.s
      At line 68 in file esercizio3.s
      At line 70 in file esercizio3.s

end 00000108

Symbol: end
   Definitions
      At line 79 in file esercizio3.s
   Uses
      At line 38 in file esercizio3.s
      At line 57 in file esercizio3.s

myCode 00000000

Symbol: myCode
   Definitions
      At line 1 in file esercizio3.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: myCode unused
next1 00000080

Symbol: next1
   Definitions
      At line 39 in file esercizio3.s
   Uses
      At line 23 in file esercizio3.s
Comment: next1 used once
next2 000000C0

Symbol: next2
   Definitions
      At line 58 in file esercizio3.s
   Uses
      At line 25 in file esercizio3.s
      At line 41 in file esercizio3.s

reset_handler 00000108

Symbol: reset_handler
   Definitions
      At line 81 in file esercizio3.s
   Uses
      At line 82 in file esercizio3.s
Comment: reset_handler used once
10 symbols
336 symbols in table
